name: Build and Push Docker on Release

on:
  release:
    types: [published]

permissions:
  contents: read
  packages: write

env:
  DEFAULT_DOCKERHUB_USER: talkreplay

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.extract.outputs.tag }}
      version: ${{ steps.extract.outputs.version }}
      is_prerelease: ${{ steps.extract.outputs.is_prerelease }}
      should_build: ${{ steps.extract.outputs.should_build }}
    steps:
      - name: Extract release information
        id: extract
        run: |
          TAG_NAME="${{ github.event.release.tag_name }}"
          IS_PRERELEASE="${{ github.event.release.prerelease }}"
          IS_DRAFT="${{ github.event.release.draft }}"
          VERSION="${TAG_NAME#v}"
          SHOULD_BUILD="true"
          if [ "$IS_PRERELEASE" = "true" ] || [ "$IS_DRAFT" = "true" ]; then
            SHOULD_BUILD="false"
          fi
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "should_build=$SHOULD_BUILD" >> $GITHUB_OUTPUT

  build-docker:
    name: Build & Push Docker
    needs: validate-release
    if: needs.validate-release.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      IMAGE_NAME: ${{ vars.IMAGE_NAME || 'talk-replay' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Prepare image targets
        id: images
        env:
          DEFAULT_USER: ${{ env.DEFAULT_DOCKERHUB_USER }}
          RELEASE_TAG: ${{ needs.validate-release.outputs.tag }}
        run: |
          OWNER=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
          GHCR_IMAGE="ghcr.io/${OWNER}/talkreplay"
          IMAGES="$GHCR_IMAGE"

          if [ -n "${DOCKERHUB_USER}" ] && [ -n "${DOCKERHUB_TOKEN}" ]; then
            DOCKER_IMAGE="${DOCKERHUB_USER}/${IMAGE_NAME}"
            IMAGES="${DOCKER_IMAGE}\n${IMAGES}"
            echo "dockerhub_target=$DOCKER_IMAGE" >> "$GITHUB_OUTPUT"
            echo "use_dockerhub=true" >> "$GITHUB_ENV"
          else
            echo "use_dockerhub=false" >> "$GITHUB_ENV"
          fi

          echo "ghcr_image=$GHCR_IMAGE" >> "$GITHUB_OUTPUT"
          echo "images<<'EOF'" >> "$GITHUB_OUTPUT"
          echo -e "$IMAGES" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          echo "TAG_VERSION=${RELEASE_TAG}" >> "$GITHUB_ENV"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: env.use_dockerhub == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.images.outputs.images }}
          tags: |
            type=raw,value=latest,enable=true
            type=raw,value=${{ needs.validate-release.outputs.tag }},enable=true
          labels: |
            org.opencontainers.image.title=TalkReplay
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ needs.validate-release.outputs.tag }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build summary
        run: |
          echo "### 🐳 Docker Build Complete" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Tag**: ${{ needs.validate-release.outputs.tag }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Version**: ${{ needs.validate-release.outputs.version }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- **GHCR Image**: `${{ steps.images.outputs.ghcr_image }}:${{ needs.validate-release.outputs.tag }}`" >> "$GITHUB_STEP_SUMMARY"
          if [ "${{ env.use_dockerhub }}" = "true" ]; then
            echo "- **Docker Hub Image**: `${{ steps.images.outputs.dockerhub_target }}:${{ needs.validate-release.outputs.tag }}`" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- Docker Hub push skipped (credentials not provided)" >> "$GITHUB_STEP_SUMMARY"
          fi

  deploy-summary:
    runs-on: ubuntu-latest
    needs: [validate-release, build-docker]
    if: always() && needs.validate-release.outputs.should_build == 'true'
    steps:
      - name: Release summary
        run: |
          RESULT="${{ needs.build-docker.result }}"
          echo "## 🚀 Release Build Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Release**: ${{ needs.validate-release.outputs.tag }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Status**: ${RESULT^^}" >> "$GITHUB_STEP_SUMMARY"
          if [ "$RESULT" = "success" ]; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "Images are available on the registries listed above." >> "$GITHUB_STEP_SUMMARY"
          else
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "Build failed. Review upstream job logs for details." >> "$GITHUB_STEP_SUMMARY"
